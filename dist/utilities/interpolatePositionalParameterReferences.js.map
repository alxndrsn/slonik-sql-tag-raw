{"version":3,"file":"interpolatePositionalParameterReferences.js","names":["_slonik","require","interpolatePositionalParameterReferences","inputSql","inputValues","resultValues","bindingNames","match","map","Number","parseInt","slice","sort","length","InvalidInputError","resultSql","replace","g1","parameterPosition","boundValue","isSqlToken","sqlFragment","createSqlTokenSqlFragment","push","values","sql","_default","exports","default"],"sources":["../../src/utilities/interpolatePositionalParameterReferences.js"],"sourcesContent":["// @flow\n\nimport {\n  InvalidInputError,\n  createSqlTokenSqlFragment,\n  isSqlToken,\n} from 'slonik';\nimport type {\n  PositionalParameterValuesType,\n} from '../types';\n\n/**\n * @see https://github.com/mysqljs/sqlstring/blob/f946198800a8d7f198fcf98d8bb80620595d01ec/lib/SqlString.js#L73\n */\nexport default (\n  inputSql: string,\n  inputValues: PositionalParameterValuesType = [],\n) => {\n  const resultValues = [];\n\n  const bindingNames = (inputSql.match(/\\$(\\d+)/g) || [])\n    .map((match) => {\n      return Number.parseInt(match.slice(1), 10);\n    })\n    .sort();\n\n  if (bindingNames[bindingNames.length - 1] > inputValues.length) {\n    throw new InvalidInputError('The greatest parameter position is greater than the number of parameter values.');\n  }\n\n  if (bindingNames.length > 0 && bindingNames[0] !== 1) {\n    throw new InvalidInputError('Parameter position must start at 1.');\n  }\n\n  const resultSql = inputSql.replace(/\\$(\\d+)/g, (match, g1) => {\n    const parameterPosition = Number.parseInt(g1, 10);\n    const boundValue = inputValues[parameterPosition - 1];\n\n    if (isSqlToken(boundValue)) {\n      // $FlowFixMe\n      const sqlFragment = createSqlTokenSqlFragment(boundValue, resultValues.length);\n\n      resultValues.push(...sqlFragment.values);\n\n      return sqlFragment.sql;\n    } else {\n      resultValues.push(inputValues[parameterPosition - 1]);\n\n      return '$' + resultValues.length;\n    }\n  });\n\n  return {\n    sql: resultSql,\n    values: resultValues,\n  };\n};\n"],"mappings":";;;;;;AAEA,IAAAA,OAAA,GAAAC,OAAA;AASA;AACA;AACA;AAFA,MAAAC,wCAAA,GAAAA,CAIEC,QAAgB,EAChBC,WAA0C,GAAG,EAAE,KAC5C;EACH,MAAMC,YAAY,GAAG,EAAE;EAEvB,MAAMC,YAAY,GAAG,CAACH,QAAQ,CAACI,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,EACnDC,GAAG,CAAED,KAAK,IAAK;IACd,OAAOE,MAAM,CAACC,QAAQ,CAACH,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAC5C,CAAC,CAAC,CACDC,IAAI,CAAC,CAAC;EAET,IAAIN,YAAY,CAACA,YAAY,CAACO,MAAM,GAAG,CAAC,CAAC,GAAGT,WAAW,CAACS,MAAM,EAAE;IAC9D,MAAM,IAAIC,yBAAiB,CAAC,iFAAiF,CAAC;EAChH;EAEA,IAAIR,YAAY,CAACO,MAAM,GAAG,CAAC,IAAIP,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;IACpD,MAAM,IAAIQ,yBAAiB,CAAC,qCAAqC,CAAC;EACpE;EAEA,MAAMC,SAAS,GAAGZ,QAAQ,CAACa,OAAO,CAAC,UAAU,EAAE,CAACT,KAAK,EAAEU,EAAE,KAAK;IAC5D,MAAMC,iBAAiB,GAAGT,MAAM,CAACC,QAAQ,CAACO,EAAE,EAAE,EAAE,CAAC;IACjD,MAAME,UAAU,GAAGf,WAAW,CAACc,iBAAiB,GAAG,CAAC,CAAC;IAErD,IAAI,IAAAE,kBAAU,EAACD,UAAU,CAAC,EAAE;MAC1B;MACA,MAAME,WAAW,GAAG,IAAAC,iCAAyB,EAACH,UAAU,EAAEd,YAAY,CAACQ,MAAM,CAAC;MAE9ER,YAAY,CAACkB,IAAI,CAAC,GAAGF,WAAW,CAACG,MAAM,CAAC;MAExC,OAAOH,WAAW,CAACI,GAAG;IACxB,CAAC,MAAM;MACLpB,YAAY,CAACkB,IAAI,CAACnB,WAAW,CAACc,iBAAiB,GAAG,CAAC,CAAC,CAAC;MAErD,OAAO,GAAG,GAAGb,YAAY,CAACQ,MAAM;IAClC;EACF,CAAC,CAAC;EAEF,OAAO;IACLY,GAAG,EAAEV,SAAS;IACdS,MAAM,EAAEnB;EACV,CAAC;AACH,CAAC;AAAA,IAAAqB,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAAA1B,wCAAA","ignoreList":[]}