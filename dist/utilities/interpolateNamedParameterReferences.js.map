{"version":3,"file":"interpolateNamedParameterReferences.js","names":["_slonik","require","_lodash","_Logger","_interopRequireDefault","_interpolatePositionalParameterReferences","obj","__esModule","default","log","Logger","child","namespace","namedPlaceholderRegex","interpolateNamedParameterReferences","inputSql","inputValues","resultValues","parameterNames","Object","keys","parameterName","parameterValue","push","usedParamterNames","resultSql","replace","match","g1","includes","InvalidInputError","parameterIndex","indexOf","slice","length","unusedParameterNames","difference","warn","interpolatePositionalParameterReferences","_default","exports"],"sources":["../../src/utilities/interpolateNamedParameterReferences.js"],"sourcesContent":["// @flow\n\nimport {\n  InvalidInputError,\n} from 'slonik';\nimport {\n  difference,\n} from 'lodash';\nimport Logger from '../Logger';\nimport type {\n  NamedParameterValuesType,\n} from '../types';\nimport interpolatePositionalParameterReferences from './interpolatePositionalParameterReferences';\n\nconst log = Logger.child({\n  namespace: 'interpolateNamedParameterReferences',\n});\n\n/**\n * @see https://regex101.com/r/KrEe8i/2\n */\nconst namedPlaceholderRegex = /[\\s(,]:([_a-z]+)/g;\n\n/**\n * @see https://github.com/mysqljs/sqlstring/blob/f946198800a8d7f198fcf98d8bb80620595d01ec/lib/SqlString.js#L73\n */\nexport default (\n  inputSql: string,\n  inputValues: NamedParameterValuesType = {},\n) => {\n  const resultValues = [];\n  const parameterNames = Object.keys(inputValues);\n\n  for (const parameterName of parameterNames) {\n    const parameterValue = inputValues[parameterName];\n\n    resultValues.push(parameterValue);\n  }\n\n  const usedParamterNames = [];\n\n  const resultSql = inputSql.replace(namedPlaceholderRegex, (match, g1) => {\n    if (!parameterNames.includes(g1)) {\n      throw new InvalidInputError('Named parameter reference does not have a matching value.');\n    }\n\n    usedParamterNames.push(g1);\n\n    const parameterIndex = parameterNames.indexOf(g1) + 1;\n\n    return match.slice(0, -g1.length - 1) + '$' + parameterIndex;\n  });\n\n  const unusedParameterNames = difference(parameterNames, usedParamterNames);\n\n  if (unusedParameterNames.length > 0) {\n    log.warn({\n      unusedParameterNames,\n    }, 'unused parameter names');\n\n    throw new InvalidInputError('Values object contains value(s) not present as named parameter references in the query.');\n  }\n\n  return interpolatePositionalParameterReferences(resultSql, resultValues);\n};\n"],"mappings":";;;;;;AAEA,IAAAA,OAAA,GAAAC,OAAA;AAGA,IAAAC,OAAA,GAAAD,OAAA;AAGA,IAAAE,OAAA,GAAAC,sBAAA,CAAAH,OAAA;AAIA,IAAAI,yCAAA,GAAAD,sBAAA,CAAAH,OAAA;AAAkG,SAAAG,uBAAAE,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAElG,MAAMG,GAAG,GAAGC,eAAM,CAACC,KAAK,CAAC;EACvBC,SAAS,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,mBAAmB;;AAEjD;AACA;AACA;AAFA,MAAAC,mCAAA,GAAAA,CAIEC,QAAgB,EAChBC,WAAqC,GAAG,CAAC,CAAC,KACvC;EACH,MAAMC,YAAY,GAAG,EAAE;EACvB,MAAMC,cAAc,GAAGC,MAAM,CAACC,IAAI,CAACJ,WAAW,CAAC;EAE/C,KAAK,MAAMK,aAAa,IAAIH,cAAc,EAAE;IAC1C,MAAMI,cAAc,GAAGN,WAAW,CAACK,aAAa,CAAC;IAEjDJ,YAAY,CAACM,IAAI,CAACD,cAAc,CAAC;EACnC;EAEA,MAAME,iBAAiB,GAAG,EAAE;EAE5B,MAAMC,SAAS,GAAGV,QAAQ,CAACW,OAAO,CAACb,qBAAqB,EAAE,CAACc,KAAK,EAAEC,EAAE,KAAK;IACvE,IAAI,CAACV,cAAc,CAACW,QAAQ,CAACD,EAAE,CAAC,EAAE;MAChC,MAAM,IAAIE,yBAAiB,CAAC,2DAA2D,CAAC;IAC1F;IAEAN,iBAAiB,CAACD,IAAI,CAACK,EAAE,CAAC;IAE1B,MAAMG,cAAc,GAAGb,cAAc,CAACc,OAAO,CAACJ,EAAE,CAAC,GAAG,CAAC;IAErD,OAAOD,KAAK,CAACM,KAAK,CAAC,CAAC,EAAE,CAACL,EAAE,CAACM,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGH,cAAc;EAC9D,CAAC,CAAC;EAEF,MAAMI,oBAAoB,GAAG,IAAAC,kBAAU,EAAClB,cAAc,EAAEM,iBAAiB,CAAC;EAE1E,IAAIW,oBAAoB,CAACD,MAAM,GAAG,CAAC,EAAE;IACnCzB,GAAG,CAAC4B,IAAI,CAAC;MACPF;IACF,CAAC,EAAE,wBAAwB,CAAC;IAE5B,MAAM,IAAIL,yBAAiB,CAAC,yFAAyF,CAAC;EACxH;EAEA,OAAO,IAAAQ,iDAAwC,EAACb,SAAS,EAAER,YAAY,CAAC;AAC1E,CAAC;AAAA,IAAAsB,QAAA,GAAAC,OAAA,CAAAhC,OAAA,GAAAM,mCAAA","ignoreList":[]}